// Generated by CoffeeScript 1.7.1

/*
Syntax:

req: data sent to Server
res: data sent to Client
 */

(function() {
  var JSONRPC, res, services, test, tests, _i, _len,
    __slice = [].slice;

  tests = [
    {
      req: '{"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": 1}',
      res: '{"jsonrpc": "2.0", "result": 19, "id": 1}'
    }, {
      req: '{"jsonrpc": "2.0", "method": "subtract", "params": [23, 42], "id": 2}',
      res: '{"jsonrpc": "2.0", "result": -19, "id": 2}'
    }, {
      req: '{"jsonrpc": "2.0", "method": "subtract", "params": {"subtrahend": 23, "minuend": 42}, "id": 3}',
      res: '{"jsonrpc": "2.0", "result": 19, "id": 3}'
    }, {
      req: '{"jsonrpc": "2.0", "method": "subtract", "params": {"minuend": 42, "subtrahend": 23}, "id": 4}',
      res: '{"jsonrpc": "2.0", "result": 19, "id": 4}'
    }, {
      req: '{"jsonrpc": "2.0", "method": "update", "params": [1,2,3,4,5]}'
    }, {
      req: '{"jsonrpc": "2.0", "method": "foobar"}'
    }, {
      req: '{"jsonrpc": "2.0", "method": "foobar2", "id": "1"}',
      res: '{"jsonrpc": "2.0", "error": {"code": -32601, "message": "Method not found"}, "id": "1"}'
    }, {
      req: '{"jsonrpc": "2.0", "method": "foobar, "params": "bar", "baz]',
      res: '{"jsonrpc": "2.0", "error": {"code": -32700, "message": "Parse error"}, "id": null}'
    }, {
      req: '{"jsonrpc": "2.0", "method": 1, "params": "bar"}',
      res: '{"jsonrpc": "2.0", "error": {"code": -32600, "message": "Invalid Request"}, "id": null}'
    }, {
      req: '[ {"jsonrpc": "2.0", "method": "sum", "params": [1,2,4], "id": "1"}, {"jsonrpc": "2.0", "method" ]',
      res: '{"jsonrpc": "2.0", "error": {"code": -32700, "message": "Parse error"}, "id": null}'
    }, {
      req: '[]',
      res: '{"jsonrpc": "2.0", "error": {"code": -32600, "message": "Invalid Request"}, "id": null}'
    }, {
      req: '[1]',
      res: '[ {"jsonrpc": "2.0", "error": {"code": -32600, "message": "Invalid Request"}, "id": null} ]'
    }, {
      req: '[1,2,3]',
      res: '[ {"jsonrpc": "2.0", "error": {"code": -32600, "message": "Invalid Request"}, "id": null}, {"jsonrpc": "2.0", "error": {"code": -32600, "message": "Invalid Request"}, "id": null}, {"jsonrpc": "2.0", "error": {"code": -32600, "message": "Invalid Request"}, "id": null} ]'
    }, {
      req: '[ {"jsonrpc": "2.0", "method": "sum", "params": [1,2,4], "id": "1"}, {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]}, {"jsonrpc": "2.0", "method": "subtract", "params": [42,23], "id": "2"}, {"foo": "boo"}, {"jsonrpc": "2.0", "method": "foo.get", "params": {"name": "myself"}, "id": "5"}, {"jsonrpc": "2.0", "method": "get_data", "id": "9"} ]',
      res: '[ {"jsonrpc": "2.0", "result": 7, "id": "1"}, {"jsonrpc": "2.0", "result": 19, "id": "2"}, {"jsonrpc": "2.0", "error": {"code": -32600, "message": "Invalid Request"}, "id": null}, {"jsonrpc": "2.0", "error": {"code": -32601, "message": "Method not found"}, "id": "5"}, {"jsonrpc": "2.0", "result": ["hello", 5], "id": "9"} ]'
    }, {
      req: '[ {"jsonrpc": "2.0", "method": "notify_sum", "params": [1,2,4]}, {"jsonrpc": "2.0", "method": "notify_hello", "params": [7]} ]'
    }
  ];

  JSONRPC = null;

  global.define = function(cb) {
    return JSONRPC = cb();
  };

  require('../build/jsonrpc');

  services = {
    sum: function() {
      var a, args, i, _i, _len;
      a = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        i = args[_i];
        a += i;
      }
      return a;
    },
    subtract: function() {
      var a, args, i, _i, _len;
      a = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (typeof a === "object") {
        return a.minuend - a.subtrahend;
      } else {
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          i = args[_i];
          a -= i;
        }
        return a;
      }
    },
    notify_hello: function(a) {},
    notify_sum: function() {
      var a, args, i, _i, _len, _results;
      a = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _results = [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        i = args[_i];
        _results.push(a += i);
      }
      return _results;
    },
    update: function(a) {},
    foobar: function() {},
    get_data: function(a) {
      return ["hello", 5];
    }
  };

  for (_i = 0, _len = tests.length; _i < _len; _i++) {
    test = tests[_i];
    console.log("TEST >>> ", test.req);
    res = JSONRPC.handleRequest(test.req, services);
    res = res ? JSON.stringify(res) : "";
    test.res = test.res || "";
    if (res.replace(/\ /g, "") !== test.res.replace(/\ /g, "")) {
      console.log("Fail <<<<< ");
      console.log("    1. ", res.replace(/\ /g, ""));
      console.log("    2. ", test.res.replace(/\ /g, ""));
    } else {
      console.log("Pass <<<<< ");
    }
    console.log("");
  }

}).call(this);
